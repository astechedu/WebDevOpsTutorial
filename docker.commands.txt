>>>>>>>>>>>> Docker Commands <<<<<<<<<<<

---------------------------------------------------------------------------------------------------

Searching: vim, Dockerfile, Docker Laravel,

-------------------------------------------------------------------------------------------------

Following are the commands list:
https://www.edureka.co/blog/docker-commands/

    docker –version
    docker pull
    docker run      //Create + Start + Atatch a container (3 works at a time)
    docker ps
    docker ps -a
    docker exec
    docker stop
    docker kill
    docker commit
    docker login
    docker push
    docker images
    docker rm
    docker rmi
    docker build
    docker search      //Searching images form docker hub
    docker create     //Create a container
    docker attach
    docker container
    docker logs
    docker start
    docker network
    docker volumn
    docker info
    service docker status
    service docker start    OR systemctl start docker.service

---------------------------------------------------------


 //Details: 

1. docker –version
This command is used to get the currently installed version of docker
Ex: docker --version

2. docker pull
Usage: docker pull <image name>
This command is used to pull images from the docker repository(hub.docker.com)
Ex: docker pull ubuntu

3. docker run
Usage: docker run -it -d <image name>
This command is used to create a container from an image
Ex: docker run -it -d ubuntu

4. docker ps
This command is used to list the running containers
Ex: docker ps

5. docker ps -a
This command is used to show all the running and exited containers
Ex: docker ps -a

6. docker exec
Usage: docker exec -it <container id> bash
This command is used to access the running container
Ex: docker exec -it fe6e370a1c9c bash

7. docker stop
Usage: docker stop <container id>
This command stops a running container
Ex: docker stop fe6e370a1c9c 

8. docker kill
Usage: docker kill <container id>
Ex: docker kill fe6e370a1c9c 

This command kills the container by stopping its execution immediately.
The difference between ‘docker kill’ and ‘docker stop’ is that ‘docker stop’ gives 
the container time to shutdown gracefully, in situations when it is taking too much 
time for getting the container to stop, one can opt to kill it

9. docker commit
Usage: docker commit <conatainer id> <username/imagename>
This command creates a new image of an edited container on the local system
Ex: docker commit fe6e370a1c9c hshar/ubuntunew

10. docker login
This command is used to login to the docker hub repository
Ex: docker login

11. docker push
Usage: docker push <username/image name>
This command is used to push an image to the docker hub repository
Ex: docker push hshar/ubuntunew


12. docker images
This command lists all the locally stored docker images
Ex: docker images

13. docker rm
Usage: docker rm <container id>
This command is used to delete a stopped container
Ex: docker rm 2b86a0703d4f

14. docker rmi
Usage: docker rmi <image-id>
This command is used to delete an image from local storage
Ex: docker rmi 2b86a0703d4f

15. docker build
Usage: docker build <path to docker file>
This command is used to build an image from a specified docker file
Ex: docker build . 

16. docker search

Ex: docker search php

16. docker create

Ex: $ docker create --name my-container-name -it ubuntu bash


.: docker network ls

.: docker volumn ls

------------------------------------------------------------------


** Linking Two Containers: 

docker run -it --name container1 -d ubuntu                    //After running it get ID 2x33kdd3k3
docker run -it --name container2 --link container1 -d ubuntu  //After running it get ID 1x73keej3u

docker exec -it 1x73keej3u bash
cat/etc/hosts


-------------------------------------------------------------------
** Remove Running Containers: 

docker rm -f (docker ps -a -q)
-------------------------------------------------------------------

-------------------------------------------------------------------

    Example: <Create new container name "my-app">

    docker create --name my-container-name -it ubuntu bash   //Create New Container: (my-app)

    docker container ls            //Container list
    docker container ls -a         //List of all containers
    docker start <container-name>  //Container-name: my-app
    docker attach <container-name> //Enter into container (my-app)
    apt-get update                 //In ubuntu conatainer update..
    apt-get install iputls-ping     
    ping 0.0.0.0
    ping google.com
    exitm                        //Exit form container 
    docker logs my-app           //My Container name

-----------------------------------------------------------
-----------------------------------------------------------
Example 01:  From Scratch (Docker Basics)

  sudo dnf install docker-ce       //Installing of docker
  docker info
  service docker status
  service docker start    OR systemctl start docker.service
  docker version 

-----------------------------------------------------------
Example 02: 
  docker --help |less   //Readable list formate

  //Docker Parent Modules: 
    config, container, image, network, node, plugin, secret, service, stack, swarm, system, volume 
  //Child Modules:
    attach, build, commit, cp, create, diff, events

    Ex:  docker container ls,  docker image ls, docker network ls

    docker container run ubuntu cat /etc/os-release //ubuntu->imageName:ContainerOpenedThenClosed        
                                                    //cat-information                                   

    docker container ls, docker container ls -a 
    docker container run ubuntu sleep 30
    docker container ls                         //docker ps -> old command

    docker container run nginx
    docker container ls
    docker container ls -a
    docker container rm <container_id>                 //To remove container
    docker container rm <container_id> <container_id>  //To remove two containers


-----------------------------------------------------------
Example 03: 

 docker container stop <container_id>
 docker container run -d ubuntu sleep 30       //Running on background, Not showing on screen
 docker container run -it ubuntu /bin/bash  //Going into container (ex. in ubuntu container)
 ubuntu_id]# hostname
 ubuntu_id]# cat /etc/os-release       //os-release -> information
 ubuntu_id]# apt-get install -----    //Install any software as apache etc.
 ubuntu_id]# Ctrl+D  Or exit          //Out of container_id and container closed
 ubuntu_id]# Ctrl+pq                  //Out of container but container is running

 docker container rm $(docker container ls -aq)      //To remove All containers

 docker exec -u 0 -it 8662ea2fa000 /bin/sh // root user going Into running container

-----------------------------------------------------------

Example: 
 Hosting php project 

 1) index.php  2)Dockerfile

 index.php:

  vim index.php             //Create file in vim editor

 <?php
      echo "Hello, this is my first project";      
  ?>
  
  :wq                       //Save & Exit from vim editor
  

  Dockerfile:
    vim Dockerfile         //Creaating Dockerfile file

    FROM php                //In vim editor
    COPY ./index.php ./
    EXPOSE 80
    CMD ["php"."-S"."0.0.0.0:80"]

    :wq                     //Exit & save 


//Running container command 
docker run --name php-server -p=3030:80 image/php

cat  /root/Dockerfile     //To read Dockerfile file from root

------------------------------------------------ 
------------------------------------------------  
//Example: nginx

docker container run -itd nginx            //This is command line
vim docker-compose.yml                     //By docker-compose.yml file

version: '3'
services:
 webapp1:
  image: nginx
  ports:
   - "8000:80"

:wq                                       //Exit and save 

docker-compose up -d
docker container ls
docker network ls                         //Checking network
docker valumn ls                    
//SomeAreAutomaticallyStartedNowStopThem
docker compose down

//Now Creating Other Container

version: '3'
services:
 webapp1:
  image: nginx
  ports:
   - "8000:80"
 webapp2:
  image: nginx
  ports:
   - "8001:80"

:wq  

docker compose up
^C

//Now Some Changing

version: '3'
services:
 webapp1:
  image: nginx
  ports:
   - "8000:80"
 webapp2:
  image: nginx
  ports:
   - "8002:80"

:wq        


docker container ls
docker container ls -a
docker compose up -d         //Only Container 2 recreated
docker container ls -a
docker container ls
clear

docker compose --help  // It searches .yml file and do all  (all file with .yml)

docker-compose -f docker-compose2.yml up -d    //Not check all files, Only checks docker-compose2.yml file

docker-compose -f docker-compose2.yml down -d 

//Now
cat docker-compose2.yml     //Copy all contents form this file

//docker-compose.yml  OR docker-compose.json  //yml and json files have same working, Choose any one form these

------------------------------------------------   
------------------------------------------------  
Example:  Wordpress    (Example On docker compose file)

docker container run --name some-mysql -e MYSQL_ROOT_PASSWORD=mypassword -d mysql:5.7
docker container inspect 7111       //Checking ip : database tier id 172.17.0.2

docker container run --name some-wordpress -e WORDPRESS_DB_HOST=172.17.0.2:3306 -e WORDPRESS_DB_PASSWORD=mypassword -d wordpress    //Standing two tiers sql & web

docker container inspect 2606

vim docker-compose.yml    // For database & wordpress

version: '3.3'
services:
  db:
   images: mysql:5.7                //For mysql
   volumn:                            
     -db_data:/var/lib/mysql
   restart: always
   environment:
     - MYSQL_ROOT_PASSWORD=somewordpress
     - MYSQL_DATABASE=wordpress
     - MYSQL_PASSWORD=wordpress

  wordpress:
   depends_on:
      - db
   image: wordpress:latest            //For web
   ports: 
      - "8000:80"
   restart:always
   environment:
     -WORDPRESS_DB_HOST=db:3306
     -WORDPRESS_DB_USER=wordpress
     -WORDPRESS_DB_PASSWORD=wordpress
     -WORDPRESS_DB_NAME=wordpress

volumes: 
   db_data:{}

:wq           //Save and exit 

cd /
cd wordpress
wordpress]# ls
wordpress]# docker-compose up ^C
wordpress]# docker container ls
wordpress]# docker volumn ls
wordpress]# docker network ls
wordpress]# docker-compose up -d
wordpress]# docker container ls
wordpress]# docker network ls
wordpress]# docker volumn ls
wordpress]# cat docker-compose.yml
wordpress]# docker-compose down       //It will delete all but not delete volumns
wordpress]# docker volumn ls
wordpress]# docker-compose down --volume  //It will delete volumns also

------------------------------------------------   
------------------------------------------------ 
ls /root     //Listing all file from root
ls -a /root 


cat  /root/Dockerfile     //To read content of Dockerfile file from root
------------------------------------------------   
------------------------------------------------  


*** Some Practices in docker *** 

docker image ls
docker pull php:7.1-cli
docker image ls
docker pull php:7.2-cli
docker image ls
docker pull php:7.4-rc-cli
docker image ls
php -v
docker run php:7.1-cli php -v
docker ps
docker ps -a
docker rm container_id
docker ps -a
docker run --rm php:7.1-cli php -v
dockeer ps -a
docker run --rm php:7.1-cli php -v
docker run --rm php:7.4-rc-cli php -v
vim script.php
//Writing some script in php in vim editor
<?php
  echo "Hello";
?>

php script.php           //Running php script 
Hello                    //Output

cd /usr/src/myapp && php -v
docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp php:7.1-cli php script.php
Hello                       //output
docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp php:7.2-cli php script.php
Hello                       //Output
docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp php:7.4-rc-cli php script.php
Hello                       //Output

//Depricated php

vim script.php

docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp php:7.1-cli php script.php
string(11) *NONEXISTENT"     //Output

docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp php:7.2-cli php script.php

Warning                          //Output

------------------------------------------------------------------------------------


------------------------------------------------------------------------------------

//Copying files into docker container (into tomcat)

cat index.html                             //Displaying content from file 

docker cp index.html <container_id>        //Tomcat Id
docker exec -it <container_id> /bin/bash
container_id > tomcate cd /tmp
container_id > ls -l


------------------------------------------------------------------------------------

<-------------- vim Editor (Start) --------------------->

        ****** vim Editor *****

vim                //Open vim editor   
i                  //Write into file
:wq!               //Save and Exit
:!q                //Close vim editor   
vim filename.txt   //Open file in vim
:help              //Helping
:q                 //Exiting Vim
:q!                //To exit from vim without saving
:wq                //To quit and save changes
x                  //Text editing-> deletion

//Text editing-> Insertion
 i    ->   This key is used to put the cursor before the current position.
 a    ->   This key is used to put the cursor after the current position.
 o    ->   This key is used to put the cursor below the line.
 O    ->   This key is used to puts the cursor above the line.

2w     or   4$             //Count:
dw                         //delete the word 
d2w                        //To delete 2 words 
d$                         //delete the line

//Undo and Redo:
u    OR    ctr + r
r                         //Replace
//Change Operator:
ce
c$
//Cursor location
:gg    OR     :G     OR      :ctrl+g

//Here is a list of some motions
w - until the start of the next word, EXCLUDING its first character.
e - to the end of the current word, INCLUDING the last character.
$ - to the end of the line, INCLUDING the last character.


* k   -> move up                                                   ^
* j   -> move down                                                  k
* h   -> move right                                           <  h        l >       
* l   -> move left                                                   j

//Search
:/word           Or          :n           Or        :N

//Search and Replace
:s/searchword/replaceword/   Or :s/searchword/replaceword/g   OR  :s/searchword/replaceword/gc Or
:%s/searchword/replaceword/gc


//Vim configuration
vim ~/.vimrc         Or       set number        Or     syntax on     Or      colorscheme COLOR_SCHEME_NAME


 <-----------------------  X (End of vim Editor)   -------------------------->








-------------------------------------------------------------------------------

Docker Laravel:

//How to create laravel development environment using docker


you should have a total of 6 services (containers) running on your machine, one for each specific need of our application, here is the full list:


    PHP 8.0 (application code)
    MySQL 5.7 (database)
    NGINX (webserver)
    phpMyAdmin (database managment)
    Redis (caching)
    MailHog (local email testing)


Also here is the link to the official Docker website with installations instructions.

https://www.docker.com/products/docker-desktop

//Step 1: Clone Laravel's git repository
git clone https://github.com/laravel/laravel.git src


Now, create a couple of files and folders we need to setup and organize our docker environment. Create two files at the root of the project, one called docker-compose.yaml and another called Dockerfile. Then create the following list of folder/subfolder.

    nginx/conf
    mysql/data
    redis/data


//Step 2: Create a custom PHP 8 image


But, according to Laravel's documentation (https://laravel.com/docs/8.x/deployment#server-requirements), there a list of PHP extensions (listed below) the framework version we will use (8.x) needs installed to properly work:


    BCMath PHP Extension
    Ctype PHP Extension
    Fileinfo PHP Extension
    JSON PHP Extension
    Mbstring PHP Extension
    OpenSSL PHP Extension
    PDO PHP Extension
    Tokenizer PHP Extension
    XML PHP Extension



To know which extensions a given PHP installation has available we just need to run the following command, php -m, after I executed it inside the PHP image we will be using (I already pulled it to my machine) and I got the following list of installed extensions.


$ docker run php:8.0.3-fpm-buster php -m
[PHP Modules]
Core
ctype
curl
date
dom
fileinfo
filter
ftp
hash
iconv
json
libxml
mbstring
mysqlnd
openssl
pcre
PDO
pdo_sqlite
Phar
posix
readline
Reflection
session
SimpleXML
sodium
SPL
sqlite3
standard
tokenizer
xml
xmlreader
xmlwriter
zlib

[Zend Modules]


Comparing it with the list of extensions required by Laravel we can see we are missing only a single extension and since we will be using MySQL, we will also need to install the pdo_mysql.




To create a custom image we will need to write some code to the Dockerfile we created earlier, the code we need is below.


FROM php:8.0.3-fpm-buster

RUN docker-php-ext-install bcmath pdo_mysql

RUN apt-get update
RUN apt-get install -y git zip unzip

COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

EXPOSE 9000


//Step 3: Setup the basic services (PHP, NGINX and MySQL)


Let's start defining docker setup and you will see how simple it actually is.

version: "3.7"

networks:
    app-network:
        driver: bridge

services:
    app:
        
    
    mysql:
        
    
    nginx:
        


//3.2 App (custom PHP) service

app:
        build: 
            context: ./
            dockerfile: Dockerfile
        image: laravel8-php-fpm-80
        container_name: app
        restart: unless-stopped
        tty: true
        working_dir: /var/www
        volumes: 
            - ./src:/var/www
        networks: 
            - app-network



//3.3 NGINX service


This container will be a standard NGINX container and will have the following set of configurations.

    nginx:
        image: nginx:1.19.8-alpine
        container_name: nginx
        restart: unless-stopped
        tty: true
        ports: 
            - 8100:80
        volumes: 
            - ./src:/var/www
            - ./nginx/conf:/etc/nginx/conf.d
        networks: 
            - app-network



//It's content will be the following.

server {
    listen 80;
    index index.php index.html;
    error_log /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /var/www/public;
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
    location / {
        try_files $uri $uri/ /index.php?$query_string;
        gzip_static on;
    }
}



//3.4 MySQL service

//I will call that database laravel8, but you can call it whatever you want.



 mysql:
        image: mysql:5.7.33
        container_name: mysql
        restart: unless-stopped
        tty: true
        environment: 
            MYSQL_DATABASE: laravel8
            MYSQL_ROOT_PASSWORD: 123456
            MYSQL_PASSWORD: 123456
            MYSQL_USER: laravel8
            SERVICE_TAGS: dev
            SERVICE_NAME: mysql
        volumes: 
            - ./mysql/data:/var/lib/mysql
        networks:
            - app-network



//In laravel env

DB_CONNECTION=mysql
DB_HOST=mysql
DB_PORT=3306
DB_DATABASE=laravel8
DB_USERNAME=laravel8
DB_PASSWORD=123456


//The first version of our docker-compose.yaml file will look like this.


version: "3.7"

networks:
    app-network:
        driver: bridge

services:
    app:
        build: 
            context: ./
            dockerfile: Dockerfile
        image: laravel8-php-fpm-80
        container_name: app
        restart: unless-stopped
        tty: true
        working_dir: /var/www
        volumes: 
            - ./src:/var/www
        networks: 
            - app-network
    
    mysql:
        image: mysql:5.7.33
        container_name: mysql
        restart: unless-stopped
        tty: true
        environment: 
            MYSQL_DATABASE: laravel8
            MYSQL_ROOT_PASSWORD: 123456
            MYSQL_PASSWORD: 123456
            MYSQL_USER: laravel8
            SERVICE_TAGS: dev
            SERVICE_NAME: mysql
        volumes: 
            - ./mysql/data:/var/lib/mysql
        networks:
            - app-network
    
    nginx:
        image: nginx:1.19.8-alpine
        container_name: nginx
        restart: unless-stopped
        tty: true
        ports: 
            - 8100:80
        volumes: 
            - ./src:/var/www
            - ./nginx/conf:/etc/nginx/conf.d
        networks: 
            - app-network


//Step 4: Test our initial setup

docker-compose up



//4.1 Accessing the homepage



docker-compose [OPTIONS] exec [SERVICE NAME] [COMMAND]

//So to install our dependencies will execute.

docker-compose exec -T app composer install




docker-compose exec -T app cp .env.example .env
docker-compose exec -T app php artisan key:generate



//Now Laravel welcome page is displaying on the breowser


4.2 Running migrations


DB_CONNECTION=mysql
DB_HOST=mysql
DB_PORT=3306
DB_DATABASE=laravel8
DB_USERNAME=laravel8
DB_PASSWORD=123456


docker-compose exec -T app php artisan config:clear
docker-compose exec -T app php artisan migrate

//4.3 Installing additional composer packages

docker-compose exec -T app composer require laravel/socialite


//Step 5: Setup additional services (Redis, phpMyAdmin and MailHog)


//5.1 Adding Redis (caching)


redis:
        image: redis:6.2.1-buster
        container_name: redis
        restart: unless-stopped
        tty: true
        volumes: 
            - ./redis/data:/data
        networks: 
            - app-network


docker-compose exec -T app composer require predis/predis


CACHE_DRIVER=redis
REDIS_HOST=redis
REDIS_CLIENT=predis

docker-compose exec -T app php artisan config:clear



//web.php

use Illuminate\Support\Facades\Redis;

Route::get('/store', function() {
    Redis::set('foo', 'bar');
});

Route::get('/retrieve', function() {
    return Redis::get('foo');
});



docker-compose down
docker-compose up

After hitting the /store route we should see nothing on the screen since we are just storin our key value pair and returning nothing, but after hitting the /retrieve route we should see on the screen the value we stored for the foo key, which is bar. 


//5.2 Adding MailHog (local mail testing)


mailhog:
        image: mailhog/mailhog:v1.0.1
        container_name: mailhog
        restart: unless-stopped
        ports: 
            - 8025:8025
        networks: 
            - app-network



MAIL_FROM_ADDRESS=isaac@isaacsouza.dev



docker-compose exec -T app php artisan config:clear


docker-compose exec -T app php artisan make:mail TestMail



//It will create a file called TestMail.php inside the app/Mail folder and in it we will the following //line of code to its build method.

/**
 * Build the message.
 *
 * @return $this
 */
public function build()
{
    return $this->view('mail.test');
}




// resources/views/email/test.blade.php

testing mailhog



//web.php

<?php

use App\Mail\TestMail;
use Illuminate\Support\Facades\Mail;

Route::get('/send-email', function() {
    Mail::to('isaac@isaacsouza.dev')->send(new TestMail);
});



docker-compose down
docker-compose up


5.3 Adding phpMyAdmin (MySQL managment)


phpmyadmin:
        image: phpmyadmin:5.1.0-apache
        container_name: phpmyadmin
        restart: unless-stopped
        ports: 
            - 8200:80
        environment:
            PMA_HOST: mysql
            PMA_PORT: 3306
            PMA_USER: laravel8
            PMA_PASSWORD: 123456
        networks:
            - app-network


docker-compose down
docker-compose up



-----docker---------X X X -------laravel-------env--------end---------


