---> Any Practice Code In This File <---

---> Rough Code <------



Links: 
 Set Environment Variable:
 https://help.ubuntu.com/community/EnvironmentVariables
 
 
 
 
 

1. Trying to install laravel in docker container

a.

When I was trying to install laravel in docker container.

Failed to download laravel/laravel from dist: The zip extension and unzip/7z commands are both missing, skipping.
The php.ini used by your command-line PHP is: 

      /usr/local/etc/php/conf.d/docker-php-ext-sodium.ini
      
    Now trying to download from source

In GitDownloader.php line 82:
                                                            
  git was not found in your PATH, skipping source download 

b. When I tryed to install laravel installer, Threw Errors (Path error)
   composer global require laravel/installer

c. Laravel default page not properly display on browser (Permissions error) 



Solutions: 

  a. Problem solved after installing zip and unzip using 'apt install zip unzip' command in docker container
  
  
  b. Run these commands in docker container


          root@5f864af62def:/var/www/html# export PATH="$PATH:$HOME/.composer/vendor/laravel/installer/bin"
          root@5f864af62def:/var/www/html# source ~/.bashrc
          root@5f864af62def:/var/www/html# laravel -v

        
           source ~/.bashrc  # This for Ubuntu 20.0
           This is working.

   c.
           sudo chown -R www-data:www-data /var/www
           sudo chown -R www-data:www-data /var/wwww/laravel
           sudo chown -R www-data:www-data /var/wwww/html/laravel
           
           sudo chown -R www-data:www-data /var/www/laravel/vendor
           sudo chown -R www-data:www-data /var/www/laravel/storage
         
           sudo chown -R www-data:www-data /var/www/html/laravel/vendor
           sudo chown -R www-data:www-data /var/www/html/laravel/storage

           sudo chgrp -R www-data storage bootstrap/cache
           sudo chmod -R ug+rwx storage bootstrap/cache



            cd into your Laravel project.
            sudo chmod -R 755 storage
            sudo chmod -R 755 bootstrap/cache
            sudo chmod -R 755 /var/www/html/storage



Example: 

Dockerfile:

     FROM php:7-fpm
     WORKDIR /var/www
     RUN apt-get update && apt-get install -y libmcrypt-dev mysql-client && docker-php-ext-install mcrypt pdo_mysql
     ADD . /var/www
     RUN chown -R www-data:www-data /var/www



his makes directory /var/www owned by www-data which is the default user for php-fpm.

Since it is compiled with user www-data.


---------------------------------------------------------------------------


# Apache2 sites-available: 


 <VirtualHost *:80>
  ServerAdmin admin@MyWebsite.com
  DocumentRoot /var/www/html/laravel/public
  ServerName laravel-local.com

  <Directory /var/www/html/laravel/public>
     Options +FollowSymlinks
     AllowOverride All
     Require all granted
  </Directory>

  ErrorLog ${APACHE_LOG_DIR}/error.log
  CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>



----------------------------------------------------------------------------


# Set Environment Path in linux: 

To put this folder on the PATH environment variable type

export PATH="$PATH:$HOME/.composer/vendor/bin"


This appends the folder to your existing PATH, however, it is only active for your current terminal session.

If you want it to be automatically set, it depends on the shell you are using. For bash, you can append this line to $HOME/.bashrc using your favorite editor or type the following on the shell

echo 'export PATH="$PATH:$HOME/.composer/vendor/bin"' >> ~/.bashrc

In order to check if it worked, logout and login again or execute

source ~/.bashrc



Detailed instructions:

in your ~/.bashrc add these lines:

export PATH="$PATH:~/.composer/vendor/bin"


Then reload:

source ~/.bashrc


Check if its added correctly:

echo $PATH

/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/web/bin:~/.compo



You probably wanted

echo 'export PATH="$PATH:$HOME/.config/composer/vendor/bin"' >> ~/.bashrc

or just

echo 'PATH="$PATH:$HOME/.config/composer/vendor/bin"' >> ~/.bashrc

since PATH has almost certainly been exported into the environment already.




Ubuntu 20.04 setting path variable to solve laravel: command not found: 

export PATH="$PATH:$HOME/.config/composer/vendor/bin" >> ~/.bashrc

and

export PATH="$PATH:$HOME/.config/composer/vendor/bin" >> ~/.profile

than I did source ~/.bashrc and source ~/.profile to update those files. 


You probably wanted:

echo 'export PATH="$PATH:$HOME/.config/composer/vendor/bin"' >> ~/.bashrc

or just

echo 'PATH="$PATH:$HOME/.config/composer/vendor/bin"' >> ~/.bashrc



-----------------------------

Extra: 



I tried all of these, and it didn't work. My Laravel storage folder had access. But /var/www/storage still didn't had permission.

After reading multiple suggestions, with this in particular. I did the following (kindly note that php is the name of my container image, and i linked my laravel project directly to /var/www):

    From my docker, I ran 
    
         docker-compose exec php ls -al /var/www/storage
    
        I saw that only root had access but i need 
            
          www-data to have access.
        
    Then I ran 
    
           docker-compose exec php chown -R $USER:www-data /var/www/storage
    
        This gives 
        
             www-data access to the storage folder
        
    Then I ran 
    
           docker-compose exec php chown -R $USER:www-data /var/www/bootstrap/cache
           
        This gives 
        
             www-data access to the bootstrap/cache folder

If you run item 1 again, www-data should have access, and your Laravel app should be fine.



-------------------------------------------------------------------------

Docker Angular App: 

# Stage 1: Compile and Build angular codebase

# Use official node image as the base image
FROM node:latest as build

# Set the working directory
WORKDIR /usr/local/app

# Add the source code to app
COPY ./ /usr/local/app/

# Install all the dependencies
RUN npm install

# Generate the build of the application
RUN npm run build


# Stage 2: Serve app with nginx server

# Use official nginx image as the base image
FROM nginx:latest

# Copy the build output to replace the default nginx contents.
COPY --from=build /usr/local/app/dist/dockerangular01 /usr/share/nginx/html

# Expose port 80
EXPOSE 80


--------------------------------------------------------------------------


 
docker=compose up -d
docker-compose down
docker-compose restart



-----------------------------------------------------------------
//Redis nginx

https://mattkomarnicki.com/articles/docker-laravel-environment-with-php-nginx-mysql-redis-and-scheduler

-----------------------------------------------------------





Docker mongo container login: 

docker exec -it contId bash
abcdefff# mongo -u root -p
 password: password
 >


create db: use dbName      ex: use mydb
show db: db              // output:  mydb
create collection:  db.createCollection("users")

insert document   : 
db.users.insertOne( { name: "mark" } );

showing recores(documents):
db.users.find()





REDIS:

version: '3.5'
services:
  cache:
    image: redis:latest
    command: ["redis-server", "/etc/redis/redis.conf"]
    volumes:
      - ./redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"





Redis: 

docker pull redis
docker run -it --name redis-container -d redis
docker logs redis-container

docker exec -it redis-container bash


root@64163c8ed78d:/data#
root@64163c8ed78d:/data# redis-cli

127.0.0.1:6379> ping
127.0.0.1:6379> exit
root@64163c8ed78d:/data# exit

Or

127.0.0.1:6379> auth password
127.0.0.1:6379> set name ajay
127.0.0.1:6379> get name
"ajay"
127.0.0.1:6379> incr counter
(integer) 1
127.0.0.1:6379> incr counter
(integer) 2
127.0.0.1:6379> get counter
"2"
127.0.0.1:6379> exit
# exit


Connect from another linked container
docker run -it --rm --link redis1:redis --name client1 redis sh

# redis-cli -h redis
redis:6379>

redis:6379> get name
"mark"
redis:6379> get counter
"2"

redis:6379> exit
# exit

Clean up

docker stop redis1
docker rm redis1

docker image ls


docker image rm redis


------------------------------------------

Docker nginx: 

Volume: 
docker run --name ngx -v "$(pwd)"/php:/usr/share/nginx/html -p8080:80 -d nginx





//https://www.docker.com/blog/how-to-use-the-official-nginx-docker-image/

// --rm (container remove after exited Or stopped it
Running a basic web server: 
$ docker run -it --rm -d -p 8080:80 --name web nginx


Adding Custom HTML:
docker run -it --rm -d -p 8080:80 --name web -v ~/site-content:/usr/share/nginx/html nginx


<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Docker Nginx</title>
</head>
<body>
  <h2>Hello from Nginx container</h2>
</body>
</html>


Build Custom NGINX Image: 

FROM nginx:latest
COPY ./index.html /usr/share/nginx/html/index.html

docker build -t webserver 


docker run -it --rm -d -p 8080:80 --name web webserver


Setting up a reverse proxy server: 

git clone https://github.com/pmckeetx/docker-nginx.git


FROM node:12.18.2 as build

ARG REACT_APP_SERVICES_HOST=/services/m

WORKDIR /app

COPY ./package.json /app/package.json
COPY ./package-lock.json /app/package-lock.json

RUN yarn install
COPY . .
RUN yarn build


FROM nginx
COPY ./nginx/nginx.conf /etc/nginx/conf.d/default.conf
COPY --from=build /app/build /usr/share/nginx/html


We configure the reverse proxy in the frontend/nginx/nginx.conf file.

server { 
 listen 80;
 server_name frontend;
 location / {
   # This would be the directory where your React app's static files are stored at
   root /usr/share/nginx/html;
   try_files $uri /index.html;
 }
 
 location /services/m {
   proxy_set_header X-Real-IP $remote_addr;
   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
   proxy_set_header X-NginX-Proxy true;
   proxy_pass http://backend:8080/services/m;
   proxy_ssl_session_reuse off;
   proxy_set_header Host $http_host;
   proxy_cache_bypass $http_upgrade;
   proxy_redirect off;
 }
}





As you can see in the second location section thatall traffic targeted to /services/m will be proxy_pass to http://backend:8080/services/m

In the root of the project is a Docker Compose file that will start both our frontend and backend services. Let’s start up our application and test if the reverse proxy is working correctly.



docker-compose -up
Creating network "docker-nginx_frontend" with the default driver
Creating network "docker-nginx_backend" with the default driver
Creating docker-nginx_frontend_1 ... done
Creating docker-nginx_backend_1  ... done
Attaching to docker-nginx_backend_1, docker-nginx_frontend_1
frontend_1  | /docker-entrypoint.sh: Configuration complete; ready for start up
backend_1   | Listening on port 8080


Shipping Our Image: 

$ docker login
$ docker tag nginx-frontend <dockerid>/nginx-frontend
$ docker push <dockerid>/nginx-frontend







---------------------------------------



Bank Widthdaw from zebpay: 


 
      
             4000.00                  w2407093     2
             2000.00                  W1917195     2    
             2000.00                  W1879121     2
             1000.00                  W1820223     2 years   
             1000.00                  W1773441     2 years             
             1000.00                  W1729858     2 years ago             
  widthraw   5007.12    inr           w1537847     4 
            15000.00   payment ref no W502468      5 years ago
      
      
      
---------------------------------------------------------------------------------      


Ubuntu Relationship: 





Data Seeding Using Foreign Tables:
----------------------------------


php artian make:migration create_users_table
php artian make:migration create_phones_table

php artisan make:model User
php artisan make:Phone Phone

php artisan migrate
php artisan migrate:reset
php artisan migrate:rollback


php artisan db:seed

-------------------------------------------------------------------------------------

Models: 
  User, Phone                 // Tables: users, phones

1. User: Default

2. Phone: 

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Phone extends Model
{
    use HasFactory;

}

-----------------------------------------------------------------------------------------

>> Migrations: 
..............

  users (default) , phones

1. users: Default


2. phones

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{

    public function up(): void
    {
        Schema::create('phones', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id');
            $table->string('phone');
            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            //Or  $table->integer('user_id')->unsigned();
            //Or $table->foreignId('user_id')->constrained()->onDelete('cascade');
           
            $table->timestamps();
        });
    }

    public function down(): void
    {   
        Schema::dropIfExists('phones');
    }
};



----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------



>> Factories:                   //Video: https://youtu.be/8K83uv6fo5o?t=511
.............

  UserFactory, PhoneFactory

1. UserFactory: Default


2. PhoneFactory:

<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use App\Models\User;

class PhoneFactory extends Factory
{

    public function definition(): array
    {        
        return [
            'phone' => fake()->phoneNumber(),
            'user_id' => User::all()->random()->id,
            'created_at' => fake()->dateTime($max = 'now'),
            'updated_at' => fake()->dateTime($max = 'now'),
            
        ];        
    }
}


----------------------------------------------------------------------------------

DatabaseSeeder: 

<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Phone;

class DatabaseSeeder extends Seeder
{

    public function run(): void
    {
          \App\Models\User::factory(10)->create();
          \App\Models\Phone::factory(10)->create();

        // \App\Models\User::factory()->create([
        //     'name' => 'Test User',
        //     'email' => 'test@example.com',
        // ]);
        
    }
}




------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

>> Separate Seeders:             // Seed Data With Foreign Key Tables
   UserSeeder, PhoneSeeder
                                 //Video: https://youtu.be/8K83uv6fo5o?t=511
 1. UserSeeder:

<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\User;
use Faker\Factory as Faker;

class UserSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $faker = Faker::create();  

       //for($i=0;$i<10;$i++)
        $user = new User;
        
        $user->name = $faker->name;
        $user->email = $faker->email;
        $uer->password = $fakr->password;
        $user->remember_token = 'AFCFEFEFREF';
        $user->save();
       //}
    }
}


 2. PhoneSeeder:


<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

use App\Models\Phone;
use Faker\Factory as Faker;
use App\Models\User;

class StudentSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $faker = Faker::create();  
     //for($i=0;$i<10;$i++)

        $phone = new Phone;
        
         $phone->modal = $faker->name;
         $phone->user_id = User::all()->random()->id();
         $phone->save();
       //}
    }
}



3. DatabaseSeeder:

  public function run(){

        $this->call([
             UserSeeder::class,
             PhoneSeeder::class
        ]);
  }



4. OR 

  public function run(){

        \App\Models\User::factory(1000)->create()->each(
           function($user){
               \App\Models\Phone::factory(1000)->create(['user_id' => $user->id]);   //Not random id
           }
        );
  }



------------------------------------------------------------------------------------
------------------------------------------------------------------------------------


Laravel Joins: 

https://techsolutionstuff.com/post/inner-join-query-in-laravel-9-example


1. 

SQL Query:

SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;


....................................................................................

2.

Read Also: Group By Query In Laravel 9 Example

 

select `users`.`id`, `users`.`name`, `users`.`email`, `countries`.`name` as `country_name` 
from `users` 
inner join `countries` on `countries`.`id` = `users`.`country_id`

.....................................................................................

3.

Laravel Query:

use App\Models\User;

$users = User::select('users.id', 'users.name', 'users.email', 'phones.phone')
        ->join('phones', 'phones.user_id', '=', 'users.id')
        ->get();


echo "<pre>"; print_r($users);


......................................................................................


4. 

Join Using DB:

use Illuminate\Support\Facades\DB;

$users = DB::table('users')
            ->join('phones', 'phones.user_id', '=', 'users.id')            
            //->select('users.*')
            ->select('users.name','users.email','phones.phone')
            ->get();


echo "<pre>";print_r($users);

........................................................................................

5.

Join() with 3 Tables:

use App\Models\User;

Now, we will give an example of joining 3 tables in laravel and all tables are connected with each other.

$users = User::join('posts', 'posts.user_id', '=', 'users.id')
              ->join('comments', 'comments.post_id', '=', 'posts.id')
              ->get(['users.*', 'posts.descrption']);


..........................................................................................

6.

Subquery Joins with groupBy() Function:

use Illuminate\Support\Facades\DB;

$posts = DB::table('posts')
                   ->select('user_id', DB::raw('MAX(created_at) as last_post_created_at'))
                   ->where('is_published', true)
                   ->groupBy('user_id');


.............................................................................................


======>   Relationship <==============

//--> One To One <--//




//--> One To Many <--//

Tables: users, posts                     //Or more tables
Models: User, Post                       //Or more models
Factories: PostFactory, UserFactory      //Or more factories


*User: 
  public function posts(){
    return $this->hasMany(Post::class);
  }


*Post: 
  
  protected $fillable = ['title','description','user_id'];

  public function user(){
     return $this->belongsTo(User::class);
  }


*PostFactory: 

  public function definition(){
    return [
       'title' => $this->faker->paragraph(1),
       'description' => $this->faler->paragraph(6),
       'user_id' => \App\Models\User:;all()->random()->id,
    ];
  }

*DatabaseSeeder: 
    \App\Models\User::factory(100)->create();
    \App\Models\Post::factory(100)->create();
  //Or 
  //$this->call([
     UserSeeder::class,
     PostSeeder::class
  ]);


CMDS: php artisan migrage:fresh --seed


*Fetch Data any where:

use App\Models\User;
use App\Models\Post;

//$user = User::all();
//$user = User::find(1);
//$user = User::with(['posts','contact'])->find(1);    //If posts, contact or more
//dd($user);
//dd($user->toArray());    //User showing with oosts,contact ..etc (If more)
//dd($user->posts);        //If post, only posts records showing
//dd($user->contact);     //If contact, only contact recods showing


//Or Same As Above
//$post = Post::all();
//$post = Post::with(['user'])->find(1);     //Showing post with user

//$contact = Contact::all();
//$contact = Contact::with(['user'])->find(1);   //Showing contact with user

//More If more table are available



//--> Many To Many <--//


Tables: posts,categories,category_post          //A Post belongs to many categories           
Models: User, Post                              //A Category belongs to many posts         
Factories: PostFactory, UserFactory                        


----------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------

//--> Deep Relationship <---

Video: 
   https://youtu.be/4hBv0GwhyqM?t=632


Posts: 

  1.     ->Usser
         ->Tags
         ->Likes
             .User
   2.     ->Comments:
              .User
              .Likes
    3.        ->Replies
                  .likes




-----------------------------------------------------------------------------------------------

---> Polymorphic Relationship --->



//Video: https://youtu.be/dlbY5PRnv-s?t=150

//--> One To One   (Polymorphic Relationship) <-----
//--> One To Many  (Polymorphic Relationship) <-----
//--> Many To Many (Polymorphic Relationship) <-----

------------------------------------------------------------------------------------------------
      
      
