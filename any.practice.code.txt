---> Any Practice Code In This File <---

---> Rough Code <------



Links: 
 Set Environment Variable:
 https://help.ubuntu.com/community/EnvironmentVariables
 
 
 
 
 

1. Trying to install laravel in docker container

a.

When I was trying to install laravel in docker container.

Failed to download laravel/laravel from dist: The zip extension and unzip/7z commands are both missing, skipping.
The php.ini used by your command-line PHP is: 

      /usr/local/etc/php/conf.d/docker-php-ext-sodium.ini
      
    Now trying to download from source

In GitDownloader.php line 82:
                                                            
  git was not found in your PATH, skipping source download 

b. When I tryed to install laravel installer, Threw Errors (Path error)
   composer global require laravel/installer

c. Laravel default page not properly display on browser (Permissions error) 



Solutions: 

  a. Problem solved after installing zip and unzip using 'apt install zip unzip' command in docker container
  
  
  b. Run these commands in docker container


          root@5f864af62def:/var/www/html# export PATH="$PATH:$HOME/.composer/vendor/laravel/installer/bin"
          root@5f864af62def:/var/www/html# source ~/.bashrc
          root@5f864af62def:/var/www/html# laravel -v

        
           source ~/.bashrc  # This for Ubuntu 20.0
           This is working.

   c.
           sudo chown -R www-data:www-data /var/www
           sudo chown -R www-data:www-data /var/wwww/laravel
           sudo chown -R www-data:www-data /var/wwww/html/laravel
           
           sudo chown -R www-data:www-data /var/www/laravel/vendor
           sudo chown -R www-data:www-data /var/www/laravel/storage
         
           sudo chown -R www-data:www-data /var/www/html/laravel/vendor
           sudo chown -R www-data:www-data /var/www/html/laravel/storage

           sudo chgrp -R www-data storage bootstrap/cache
           sudo chmod -R ug+rwx storage bootstrap/cache



            cd into your Laravel project.
            sudo chmod -R 755 storage
            sudo chmod -R 755 bootstrap/cache
            sudo chmod -R 755 /var/www/html/storage



Example: 

Dockerfile:

     FROM php:7-fpm
     WORKDIR /var/www
     RUN apt-get update && apt-get install -y libmcrypt-dev mysql-client && docker-php-ext-install mcrypt pdo_mysql
     ADD . /var/www
     RUN chown -R www-data:www-data /var/www



his makes directory /var/www owned by www-data which is the default user for php-fpm.

Since it is compiled with user www-data.


---------------------------------------------------------------------------


# Apache2 sites-available: 


 <VirtualHost *:80>
  ServerAdmin admin@MyWebsite.com
  DocumentRoot /var/www/html/laravel/public
  ServerName laravel-local.com

  <Directory /var/www/html/laravel/public>
     Options +FollowSymlinks
     AllowOverride All
     Require all granted
  </Directory>

  ErrorLog ${APACHE_LOG_DIR}/error.log
  CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>



----------------------------------------------------------------------------


# Set Environment Path in linux: 

To put this folder on the PATH environment variable type

export PATH="$PATH:$HOME/.composer/vendor/bin"


This appends the folder to your existing PATH, however, it is only active for your current terminal session.

If you want it to be automatically set, it depends on the shell you are using. For bash, you can append this line to $HOME/.bashrc using your favorite editor or type the following on the shell

echo 'export PATH="$PATH:$HOME/.composer/vendor/bin"' >> ~/.bashrc

In order to check if it worked, logout and login again or execute

source ~/.bashrc



Detailed instructions:

in your ~/.bashrc add these lines:

export PATH="$PATH:~/.composer/vendor/bin"


Then reload:

source ~/.bashrc


Check if its added correctly:

echo $PATH

/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/web/bin:~/.compo



You probably wanted

echo 'export PATH="$PATH:$HOME/.config/composer/vendor/bin"' >> ~/.bashrc

or just

echo 'PATH="$PATH:$HOME/.config/composer/vendor/bin"' >> ~/.bashrc

since PATH has almost certainly been exported into the environment already.




Ubuntu 20.04 setting path variable to solve laravel: command not found: 

export PATH="$PATH:$HOME/.config/composer/vendor/bin" >> ~/.bashrc

and

export PATH="$PATH:$HOME/.config/composer/vendor/bin" >> ~/.profile

than I did source ~/.bashrc and source ~/.profile to update those files. 


You probably wanted:

echo 'export PATH="$PATH:$HOME/.config/composer/vendor/bin"' >> ~/.bashrc

or just

echo 'PATH="$PATH:$HOME/.config/composer/vendor/bin"' >> ~/.bashrc



-----------------------------

Extra: 



I tried all of these, and it didn't work. My Laravel storage folder had access. But /var/www/storage still didn't had permission.

After reading multiple suggestions, with this in particular. I did the following (kindly note that php is the name of my container image, and i linked my laravel project directly to /var/www):

    From my docker, I ran 
    
         docker-compose exec php ls -al /var/www/storage
    
        I saw that only root had access but i need 
            
          www-data to have access.
        
    Then I ran 
    
           docker-compose exec php chown -R $USER:www-data /var/www/storage
    
        This gives 
        
             www-data access to the storage folder
        
    Then I ran 
    
           docker-compose exec php chown -R $USER:www-data /var/www/bootstrap/cache
           
        This gives 
        
             www-data access to the bootstrap/cache folder

If you run item 1 again, www-data should have access, and your Laravel app should be fine.



-------------------------------------------------------------------------
Docker Angular App: 

# Stage 1: Compile and Build angular codebase

# Use official node image as the base image
FROM node:latest as build

# Set the working directory
WORKDIR /usr/local/app

# Add the source code to app
COPY ./ /usr/local/app/

# Install all the dependencies
RUN npm install

# Generate the build of the application
RUN npm run build


# Stage 2: Serve app with nginx server

# Use official nginx image as the base image
FROM nginx:latest

# Copy the build output to replace the default nginx contents.
COPY --from=build /usr/local/app/dist/dockerangular01 /usr/share/nginx/html

# Expose port 80
EXPOSE 80


--------------------------------------------------------------------------

Worked: 

1. Mysql with adminer:

docker-compose.yml: 

 services:
   db: 
    image: mysql:latest
    container_name: mydb
    restart: always
    environment: 
      MYSQL_ROOT_PASSWORD: ajay123


   adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

 
docker-compose up -d
docker-compose down

docker exex -it mydb bash

abcd# mysql -u root -p
   password: ajay123

  mysql> .......
  
 
 
 
  2. phpmyadmin & mysql (Worked)
  
    docker-compose.yml: 
    
     version: "3"
     services:
       db: 
        image: mysql:latest
        container_name: mydb
        restart: always
        environment: 
          MYSQL_ROOT_PASSWORD: example


       phpmyadmin:
        image: phpmyadmin
        restart: always
        environment: 
          - PMA_HOST:db
        ports:
          - 8080:80

  
docker-compose up -d
docker-compose down 
  
  
  
  3. php and mysql (worked)
  
  prac03/Dockerfile
  prac03/docker-compose.yml
  prac03/php/src/index.php
  
  
version: "3.5"
services:
  db: 
   image: mysql:latest
   container_name: mydb
   restart: always
   environment: 
     MYSQL_ROOT_PASSWORD: example
   ports: 
    - 3306:3306
 
  web: 
    build: 
     context: ./
     dockerfile: Dockerfile
    container_name: phpserver
    depends_on: 
       - db
    volumes: 
       - ./php/src:/var/www/html
    ports: 
       - 8000:80


//Dir
php/src/index.php:

<?php
echo "php and mysql";

$servername = "db";
$username = "root";
$password = "example";

// Create connection
$conn = new mysqli($servername, $username, $password);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}
echo "Connected successfully";

?>

docker=compose up -d
docker-compose down
docker-compose restart




4. php mysql & phpmyadmin 

Dockerfile: 

  FROM php:8.0-apache
  RUN docker-php-ext-install mysqli && docker-php-ext-enable mysqli
  RUN apt-get update && apt-get upgrade -y



docker-compose.yml

  version: "3.5"
  services:
    db: 
     image: mysql:latest
     container_name: mydb
     restart: always
     environment: 
       MYSQL_ROOT_PASSWORD: example
     ports: 
      - 3306:3306

    web: 
      build: 
       context: ./
       dockerfile: Dockerfile
      container_name: phpserver
      depends_on: 
         - db
      volumes: 
         - ./php/src:/var/www/html
      ports: 
         - 8000:80

    phpmyadmin: 
         image: phpmyadmin
         container_name: phpmyadmin
         environment: 
            PMA_HOST: db
         ports: 
           - 8080:80



index.php:


<?php
echo "php and mysql";

$servername = "db";
$username = "root";
$password = "example";

// Create connection
$conn = new mysqli($servername, $username, $password);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}
$conn->query('create database ajay');
echo "Connected successfully";

?>


docker=compose up -d
docker-compose down
docker-compose restart



-----------------------------------------------------------------





















---------------------------------------


