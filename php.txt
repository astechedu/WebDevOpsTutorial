
>>>>> PHP<<<<<<<<

---------------------------------------

Keys: 
  password hash, password identify, header, php installation on ubuntu,
  php mysql connection,
----------------------------------------
----------------------------------------
----------------------------------------
parse_url( , )
explode()
parse_str( , )
header_remove()
is_array()
count()
strtoupper()
json_encode()
exit()


Flags:

PHP_URL_PATH


-------------------------------------------
-------------------------------------------
>> Password Hash <<

//Content Type

//-----Content Types In PHP--------------

//header("Content-Type:application/json");
//header("Content-Type:application/pdf");
//header("Content-Type:image/png");
//header("Content-Type:video/mp4");

//header('Access-Control-Allow-Origin:*')
//header('Access-Control-Allow-Methods: GET, POST')
//header('Access-Control-Allow-Headers: ')

//-----Content Types In PHP -------------


//Password Hashing


//echo md5("Ajay Sisaudiya"); echo "<br>";
//echo sha1("Ajay Sisaudiya"); echo "<br>";
//echo crypt("Ajay Sisaudiya",10); echo "<br>";
//echo base64_encode("Ajay Sisaudiya"); echo "<br>";
//echo base64_decode("QWpheSBTaXNhdWRpeWE="); echo "<br>";
//echo password_hash("Ajay Sisaudiya",PASSWORD_DEFAULT); echo "<br>";
//echo password_hash("Ajay Sisaudiya", PASSWORD_BCRYPT ); echo "<br>";
//echo password_hash("Ajay Sisaudiya", PASSWORD_ARGON2I ); echo "<br>";
//echo password_hash("Ajay Sisaudiya", PASSWORD_ARGON2ID ); echo "<br>";

//password_verify() - Verifies that a password matches a hash
//crypt() - One-way string hashing
//» userland implementation
//sodium_crypto_pwhash_str() - Get an ASCII-encoded hash


-------------------------------------------

# PHP Installation On Ubuntu


##### Configure PHP on a Debian or Ubuntu instance

 
Step 1 — Add the repository

You must first run the following command to add a repository before installing PHP.

	sudo add-apt-repository ppa:ondrej/php


Step 2 — Update 

Run the following to update your list of packages.

	sudo apt update


Step 3 — Install PHP

You have the choice to install PHP as a module or FPM.

Installing as a PHP module

Run the following commands to install and load PHP.

	sudo apt install php8.0 libapache2-mod-php8.0


Installing as FPM

Run the following commands to install, enable, and load PHP-FPM.

	sudo apt install php8.0-fpm libapache2-mod-fcgid


Step 4 — Confirm PHP is installed

Finally, run the following command to view the version you installed.

	php -v


Install modules (extensions)

After PHP is installed, you can proceed with installing any modules (also called extensions) needed.

View available modules you can install

This command lists all modules available for you to install.

	sudo apt search php8.0-*


Install a module

After locating the correct name of a module, you can install it using the following command.

	sudo apt install php8.0-sqlite3

You can also install several modules at once. This assumes the module names start with php8.0-.

	sudo apt install php8.0-{mysql,imap,zip}


View modules currently loaded

The following command lists all modules currently loaded by PHP.

	php -m


Configuration Files

There are a few configuration files for PHP that are used for the CLI and the Apache modules (or PHP-FPM) specifically. Change <version> to your specific version of PHP.

	/etc/php/cli/<version>/php.ini

The primary configuration file for PHP when executed from the CLI. 

	/etc/php/<version>/apache2/php.ini

The primary configuration file for PHP when run from the Apache module.

	/etc/php/<version>/fpm/php.ini

The primary configuration file for PHP when run from as PHP-FPM.

-------------------------------------------



# PHP Mysql Connection: 


 ## Create MySql Table 

Example: 

	CREATE TABLE Persons (
	    personID int,
	    lastName varchar(255),
	    firstName varchar(255),
	    address varchar(255),
	    city varchar(255)
	);


	INSERT INTO table_name
	VALUES (value1, value2, value3, ...); 

        SELECT * FROM table_name; 


Example (MySQLi Procedural): 

	<?php
	$servername = "localhost";
	$username = "username";
	$password = "password";

	// Create connection
	$conn = mysqli_connect($servername, $username, $password);

	// Check connection
	if (!$conn) {
	  die("Connection failed: " . mysqli_connect_error());
	}
	echo "Connected successfully";
	?> 


Example (MySQLi Object-Oriented):

	<?php
	$servername = "localhost";
	$username = "username";
	$password = "password";

	// Create connection
	$conn = new mysqli($servername, $username, $password);

	// Check connection
	if ($conn->connect_error) {
	  die("Connection failed: " . $conn->connect_error);
	}
	echo "Connected successfully";
	?> 


Example (PDO):

	<?php
	$servername = "localhost";
	$username = "username";
	$password = "password";

	try {
	  $conn = new PDO("mysql:host=$servername;dbname=myDB", $username, $password);
	  // set the PDO error mode to exception
	  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	  echo "Connected successfully";
	} catch(PDOException $e) {
	  echo "Connection failed: " . $e->getMessage();
	}
	?> 
	
	

 Example (MySQLi Procedural):
 
	<?php
	$servername = "localhost";
	$username = "username";
	$password = "password";
	$dbname = "myDB";

	// Create connection
	$conn = mysqli_connect($servername, $username, $password, $dbname);
	// Check connection
	if (!$conn) {
	  die("Connection failed: " . mysqli_connect_error());
	}

	$sql = "SELECT id, firstname, lastname FROM MyGuests";
	$result = mysqli_query($conn, $sql);

	if (mysqli_num_rows($result) > 0) {
	  // output data of each row
	  while($row = mysqli_fetch_assoc($result)) {
	    echo "id: " . $row["id"]. " - Name: " . $row["firstname"]. " " . $row["lastname"]. "<br>";
	  }
	} else {
	  echo "0 results";
	}

	mysqli_close($conn);
	?> 
	
	
	
Example (MySQLi Object-oriented):
	
	<?php
	$servername = "localhost";
	$username = "username";
	$password = "password";
	$dbname = "myDB";

	// Create connection
	$conn = new mysqli($servername, $username, $password, $dbname);
	// Check connection
	if ($conn->connect_error) {
	  die("Connection failed: " . $conn->connect_error);
	}

	$sql = "SELECT id, firstname, lastname FROM MyGuests";
	$result = $conn->query($sql);

	if ($result->num_rows > 0) {
	  // output data of each row
	  while($row = $result->fetch_assoc()) {
	    echo "id: " . $row["id"]. " - Name: " . $row["firstname"]. " " . $row["lastname"]. "<br>";
	  }
	} else {
	  echo "0 results";
	}
	$conn->close();
	?> 
	
	
	
Example (PDO): 

	<?php
	echo "<table style='border: solid 1px black;'>";
	echo "<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>";

	class TableRows extends RecursiveIteratorIterator {
	  function __construct($it) {
	    parent::__construct($it, self::LEAVES_ONLY);
	  }

	  function current() {
	    return "<td style='width:150px;border:1px solid black;'>" . parent::current(). "</td>";
	  }

	  function beginChildren() {
	    echo "<tr>";
	  }

	  function endChildren() {
	    echo "</tr>" . "\n";
	  }
	}

	$servername = "localhost";
	$username = "username";
	$password = "password";
	$dbname = "myDBPDO";

	try {
	  $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
	  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	  $stmt = $conn->prepare("SELECT id, firstname, lastname FROM MyGuests");
	  $stmt->execute();

	  // set the resulting array to associative
	  $result = $stmt->setFetchMode(PDO::FETCH_ASSOC);
	  foreach(new TableRows(new RecursiveArrayIterator($stmt->fetchAll())) as $k=>$v) {
	    echo $v;
	  }
	} catch(PDOException $e) {
	  echo "Error: " . $e->getMessage();
	}
	$conn = null;
	echo "</table>";
	?> 	
	

-------------------------------------------
-------------------------------------------
